#    _               _
#   | |__   __ _ ___| |__  _ __ ___
#   | '_ \ / _` / __| '_ \| '__/ __|
#  _| |_) | (_| \__ \ | | | | | (__
# (_)_.__/ \__,_|___/_| |_|_|  \___|
# Config for BASH (C) 2016-2025 Gordon Engelke, reject@email.de


# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

###################################
## History
###################################

# Append to the history file, don't overwrite it
shopt -s histappend

# Combine multiline commands into one in history
shopt -s cmdhist

# Ignore duplicates, ls without options and builtin commands
export HISTCONTROL=ignoredups:erasedups
#HISTCONTROL=ignoreboth
export HISTIGNORE="&:ls:[bf]g:exit""]"

export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"
unset HISTSIZE
unset HISTFILESIZE
export HISTSIZE
export HISTFILESIZE
# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
#export HISTFILESIZE=20000
#export HISTSIZE=10000

#export HISTTIMEFORMAT="%F_%R  "
export HISTTIMEFORMAT="%d-%m-%y %T  "

# Save and reload the history after each command finishes
export PROMPT_COMMAND="history -a;history -n;$PROMPT_COMMAND"
#export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

###################################
## Misc
###################################

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

export REQUESTS_CA_BUNDLE='/etc/ssl/certs/ca-certificates.crt'
export MINIKUBE_IN_STYLE=0
export ANSIBLE_HOST_KEY_CHECKING=False

#export http_proxy=localhost:3128
#export https_proxy=localhost:3128

export PATH=/opt/local/bin:/opt/local/sbin:/usr/local/bin:$PATH
### MANAGED BY RANCHER DESKTOP START (DO NOT EDIT)
export PATH="/Users/gengelke/.rd/bin:$PATH"
### MANAGED BY RANCHER DESKTOP END (DO NOT EDIT)
export LC_ALL=en_US.UTF-8

if [[ "$OSTYPE" == "darwin"* ]]; then
  if [ -f $(brew --prefix)/etc/bash_completion ]; then
      . $(brew --prefix)/etc/bash_completion
  fi

  open -a XQuartz
  socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:\"$DISPLAY\" &
  export HOSTIP=$(ifconfig en0 | grep inet | awk '$1=="inet" {print $2}')
  xhost + $HOSTIP

  alias ls='ls -G'
fi

#man() {
#    env LESS_TERMCAP_mb=$'\E[01;31m' \
#    LESS_TERMCAP_md=$'\E[01;38;5;74m' \
#    LESS_TERMCAP_me=$'\E[0m' \
#    LESS_TERMCAP_se=$'\E[0m' \
#    LESS_TERMCAP_so=$'\E[38;5;246m' \
#    LESS_TERMCAP_ue=$'\E[0m' \
#    LESS_TERMCAP_us=$'\E[04;38;5;146m' \
#    man "$@"
#}

###################################
## Color support
###################################

if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    alias dump='od -A x -t x1z -v'
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi

unset color_prompt force_color_prompt

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Colors for man pages
function _colorman() {
  env \
    LESS_TERMCAP_mb=$(printf "\e[1;35m") \
    LESS_TERMCAP_md=$(printf "\e[1;34m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[7;40m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;33m") \
      "$@"
}

export LESS_TERMCAP_mb=$'\E[1;31m'     # begin bold
export LESS_TERMCAP_md=$'\E[1;36m'     # begin blink
export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
export LESS_TERMCAP_so=$'\E[01;44;33m' # begin reverse video
export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
export LESS_TERMCAP_ue=$'\E[0m'        # reset underline

function man() { _colorman man "$@"; }
#function perldoc() { command perldoc -n less "$@" |man -l -; }

# Syntax highlighting in cat
if [ -f /usr/bin/batcat ]; then
    alias cat="/usr/bin/batcat --paging=never --style='plain' --theme=TwoDark $*"
fi
#alias cat="pygmentize -f console -g -O style=colorful"

###################################
## Alias definitions
###################################

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

## some more ls aliases
#alias ll='ls -alF'
#alias la='ls -A'
#alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

alias gacp='git add . && git commit --message \"$@\" && git push'
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias vi='vim'
alias ll='ls -al'
alias lll='ls -strahl'
alias posh='pwsh -nologo'

if [ -x /mnt/c/WINDOWS/system32/wsl.exe ]; then
  alias init='wsl.exe -d wsl-vpnkit service wsl-vpnkit start && sudo service cntlm start && sudo service docker start'
  alias wsl='wsl.exe'
fi

if ! [[ "$OSTYPE" == "darwin"* ]]; then
  alias pbcopy='xsel --clipboard --input'    #emulate OS X pbcopy. copes text-input to clipboard.
  alias pbpaste='xsel --clipboard --output'
  #alias pbcopy='xclip -selection clipboard'
  #alias pbpaste='xclip -selection clipboard -o'
fi

###################################
## Enable bash completion in interactive shells
###################################

if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

if [[ $- == *i* ]]
then
    stty -ixon  #allow the use of Ctrl-s in reverse search of bash.
#    bind 'TAB:menu-complete'

    # Bash command history completion with arrow keys
    bind '"\e[A": history-search-backward'
    bind '"\e[B": history-search-forward'

    bind '"\e[C": forward-char'
    bind '"\e[D": backward-char'
fi

###################################
### Automagically start Tmux session through SSH
###################################

if command -v tmux>/dev/null; then
        case "/$(ps -p $PPID -o comm=)" in */sshd)
            [[ $- == *i* ]] && [[ ! $TERM =~ screen ]] && [[ -z $TMUX ]] && tmux attach -t ge_tmux || tmux new -s ge_tmux && return;;
        esac
fi

if command -v screen>/dev/null; then
    if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ] || [ -z "$STY" ]; then
        case "/$(ps -p $PPID -o comm=)" in */sshd)
            [[ $- == *i* ]] && [[ ! $TERM =~ screen ]] && [[ -z $TMUX ]] && screen -Rd "ge-screen" && return;;
        esac
    fi
fi

###################################
## Prompt
###################################

parse_git_branch() {
     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

if ${use_color} ; then
        # Enable colors for ls, etc.  Prefer ~/.dir_colors #64489
        if type -P dircolors >/dev/null ; then
                if [[ -f ~/.dir_colors ]] ; then
                        eval $(dircolors -b ~/.dir_colors)
                elif [[ -f /etc/DIR_COLORS ]] ; then
                        eval $(dircolors -b /etc/DIR_COLORS)
        else
            eval $(dircolors)
                fi
        fi

        if [[ ${EUID} == 0 ]] ; then
            #PS1='${debian_chroot:+($debian_chroot)}\[\033[0;31m\]\u@\[\033[1;31m\]\h\[\033[01;33m\] \w \$\[\033[00m\] '
            PS1="${debian_chroot:+($debian_chroot)}\[\033[1;31m\]\u\[\033[1;34m\]@\h\[\033[00m\]: \033[1;33m\]\w\033[0;36m\]\$(parse_git_branch) \n\[\033[00m\]\[\033[01;31m\]>\[\033[01;33m\]>\[\033[01;32m\]>\[\033[0m\] "
        else
            PS1="${debian_chroot:+($debian_chroot)}\[\033[1;32m\]\u\[\033[1;34m\]@\h\[\033[00m\]: \033[1;33m\]\w\033[0;36m\]\$(parse_git_branch) \n\[\033[00m\]\[\033[01;31m\]>\[\033[01;33m\]>\[\033[01;32m\]>\[\033[0m\] "
        fi
else
        if [[ ${EUID} == 0 ]] ; then
                # show root@ when we don't have colors
                PS1='\u@\h \w \$ '
        else
                PS1='\u@\h \w \$ '
        fi
fi

clear
